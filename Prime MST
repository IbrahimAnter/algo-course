using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace primMST
{
    internal class Program
    {
        static int V = 5; 

        
        static int GetMinKeyVertex(int[] key, bool[] inMST)
        {
            int min = int.MaxValue, minIndex = -1;

            for (int v = 0; v < V; v++)
            {
                if (!inMST[v] && key[v] < min)
                {
                    min = key[v];
                    minIndex = v;
                }
            }

            return minIndex;
        }

        // Print the edges of the MST
        static void PrintMST(int[] parent, int[,] graph)
        {
            Console.WriteLine("Edge \tWeight");
            for (int i = 1; i < V; i++)
            {
                Console.WriteLine($"{parent[i]} - {i} \t{graph[i, parent[i]]}");
            }
        }

       
        public static void PrimMST(int[,] graph)
        {
            int[] parent = new int[V];    // Stores the MST
            int[] key = new int[V];      // Key values for edge weights
            bool[] inMST = new bool[V];  // Tracks vertices included in MST

            // Initialize all keys to infinity and MST set to false
            for (int i = 0; i < V; i++)
            {
                key[i] = int.MaxValue;
                inMST[i] = false;
            }

            key[0] = 0;       // Start with the first vertex
            parent[0] = -1;   // First node is the root of the MST

            // Build the MST
            for (int count = 0; count < V - 1; count++)
            {
                int u = GetMinKeyVertex(key, inMST); // Get the next vertex
                inMST[u] = true;                     // Add it to the MST

                // Update the keys of adjacent vertices
                for (int v = 0; v < V; v++)
                {
                    if (graph[u, v] != 0 && !inMST[v] && graph[u, v] < key[v])
                    {
                        parent[v] = u;
                        key[v] = graph[u, v];
                    }
                }
            }

          
            PrintMST(parent, graph);
        }

        static void Main(string[] args)
        {
            int[,] graph = {
            { 0, 2, 0, 6, 0 },
            { 2, 0, 3, 8, 5 },
            { 0, 3, 0, 0, 7 },
            { 6, 8, 0, 0, 9 },
            { 0, 5, 7, 9, 0 }
             };

            PrimMST(graph);

            console.Readkey();

        }
    }
}
